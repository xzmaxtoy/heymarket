name: Deploy to DigitalOcean
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Reduced timeout to 1 hour
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Combined deployment steps to reduce SSH connection overhead
      - name: Deploy to DigitalOcean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DROPLET_IP }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 45m  # Reduced timeout
          script: |
            echo "=== STEP 1: Updating repository ==="
            # Check if directory exists, if not create it
            if [ ! -d "/root/heymarket" ]; then
              echo "Directory not found, creating..."
              mkdir -p /root/heymarket
              cd /root/heymarket
              git clone --depth=1 https://github.com/xzmaxtoy/heymarket.git .
            else
              cd /root/heymarket
              # Try to pull with retries
              for i in {1..3}; do
                echo "Attempt $i: Pulling latest code..."
                git config --global http.sslVerify false
                if git pull origin main; then
                  echo "Pull successful!"
                  break
                else
                  echo "Pull failed, retrying in 5 seconds..."
                  sleep 5
                fi
                
                if [ $i -eq 3 ]; then
                  echo "All pull attempts failed. Trying to clone fresh..."
                  cd /root
                  rm -rf heymarket
                  git clone --depth=1 https://github.com/xzmaxtoy/heymarket.git
                  cd heymarket
                fi
              done
            fi
            
            echo "=== STEP 2: Updating environment variables ==="
            # Update environment variables
            cat > .env << EOL
            PORT=3000
            NODE_ENV=production
            CORS_ORIGIN=http://${{ secrets.DROPLET_IP }}
            
            # API Keys
            HEYMARKET_API_KEY=${{ secrets.HEYMARKET_API_KEY }}
            EMPLOYEE_LIST_URL=${{ secrets.EMPLOYEE_LIST_URL }}
            
            # Supabase Configuration
            SUPABASE_URL=${{ secrets.SUPABASE_URL }}
            SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
            SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
            
            # Batch Processing Configuration
            BATCH_PROCESSING_RATE=5
            BATCH_MAX_RETRIES=3
            BATCH_RETRY_DELAY=300000
            BATCH_CLEANUP_INTERVAL=3600000
            BATCH_MAX_SIZE=10000
            
            # Performance Monitoring
            ENABLE_PERFORMANCE_MONITORING=true
            PERFORMANCE_SAMPLE_RATE=100
            SLA_WARNING_THRESHOLD=900000
            SLA_CRITICAL_THRESHOLD=1800000
            
            # Feature Flags
            FEATURE_FLAG_NEW_BATCH_SYSTEM=true
            FEATURE_FLAG_ANALYTICS_DASHBOARD=true
            FEATURE_FLAG_PERFORMANCE_MONITORING=true
            
            # Logging Configuration
            LOG_LEVEL=info
            LOG_FORMAT=json
            ENABLE_REQUEST_LOGGING=true
            
            # Cache Configuration
            PREVIEW_CACHE_SIZE=1000
            PREVIEW_CACHE_TTL=3600
            EOL
            echo "Environment variables updated successfully."

            echo "=== STEP 3: Verifying repository contents ==="
            cd /root/heymarket
            ls -la
            if [ ! -f "docker-compose.yml" ]; then
              echo "ERROR: docker-compose.yml not found!"
              exit 1
            fi
            echo "docker-compose.yml found, proceeding with deployment."
            
            # Check Docker Compose version
            docker-compose --version
            
            echo "=== STEP 3: Stopping running containers ==="
            cd /root/heymarket
            docker-compose -f docker-compose.yml down || echo "No containers to stop"
            echo "Containers stopped successfully."

            echo "=== STEP 4: Cleaning up Docker system ==="
            # Faster selective cleanup
            docker image prune -f --filter "until=24h" &
            docker container prune -f &
            docker network prune -f &
            wait
            echo "Docker system cleaned up."

            echo "=== STEP 5: Building Docker images ==="
            cd /root/heymarket
            # Enable BuildKit for faster builds
            export DOCKER_BUILDKIT=1
            export COMPOSE_DOCKER_CLI_BUILD=1
            # Use build cache for efficiency
            docker-compose -f docker-compose.yml build
            echo "Docker images built successfully."

            echo "=== STEP 6: Starting containers ==="
            cd /root/heymarket
            docker-compose -f docker-compose.yml up -d
            echo "Containers started successfully."

            echo "=== STEP 7: Verifying deployment ==="
            # Wait for container to be healthy
            echo "Waiting for container to be ready..."
            for i in {1..30}; do
              if curl -s http://localhost/health > /dev/null; then
                echo "Application is healthy!"
                break
              fi
              echo "Waiting for application to start... ($i/30)"
              sleep 2
            done
            
            docker-compose -f docker-compose.yml ps
            docker-compose -f docker-compose.yml logs --tail=10
            
            # Check if the application is responding
            echo "Checking application health..."
            curl -s http://localhost/health || echo "Health check failed"
            echo "Deployment verification complete."
